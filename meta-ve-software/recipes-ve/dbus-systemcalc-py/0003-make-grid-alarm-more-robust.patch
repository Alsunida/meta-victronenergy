From 52f26e42a7d4e96161d8a38dbd0084618eb74e81 Mon Sep 17 00:00:00 2001
From: Izak Burger <isburger@gmail.com>
Date: Thu, 23 Jan 2020 15:32:18 +0200
Subject: [PATCH 3/6] make grid alarm more robust

In rare cases, the alarm delay would be cancelled before it could
raise the alarm. Also make the timeout slightly longer since a VE.Bus
reset would still sometimes take long enough to trip the alarm.

https://github.com/victronenergy/venus/issues/595
---
 delegates/gridalarm.py  |  9 +++++----
 tests/gridalarm_test.py | 14 +++++++-------
 2 files changed, 12 insertions(+), 11 deletions(-)

diff --git a/delegates/gridalarm.py b/delegates/gridalarm.py
index c3b13b7..11a16d6 100644
--- a/delegates/gridalarm.py
+++ b/delegates/gridalarm.py
@@ -2,7 +2,7 @@ import gobject
 from delegates.base import SystemCalcDelegate
 
 class GridAlarm(SystemCalcDelegate):
-	ALARM_TIMEOUT = 5000
+	ALARM_TIMEOUT = 10000
 	def __init__(self):
 		super(GridAlarm, self).__init__()
 		# We arm the alarm only once grid power was detected.
@@ -30,6 +30,7 @@ class GridAlarm(SystemCalcDelegate):
 	def cancel_alarm(self, v=0):
 		if self._timer is not None:
 			gobject.source_remove(self._timer)
+			self._timer = None
 		self._dbusservice['/Ac/Alarms/GridLost'] = v
 
 	def update_values(self, newvalues):
@@ -39,11 +40,11 @@ class GridAlarm(SystemCalcDelegate):
 				# No active input, or generator input is active. Raise the
 				# alarm. An active generator will be treated as lost grid.
 				self.raise_alarm()
-			else:
+			elif source in (0, 1, 3):
 				# Source can be:
-				# None: Multi is gone, eg during reset or startup
+				# None: Multi is gone, eg during reset or startup. Do nothing.
 				# 0: Not available - active input has no type configured. Assume it is grid.
-				# 1: Grid - arm the alarm
+				# 1: Grid - cancel the alarm.
 				# 3: Shore - same as grid
 				self.cancel_alarm()
 		else:
diff --git a/tests/gridalarm_test.py b/tests/gridalarm_test.py
index 8942376..62a2508 100644
--- a/tests/gridalarm_test.py
+++ b/tests/gridalarm_test.py
@@ -41,7 +41,7 @@ class TestGridAlarm(TestSystemCalcBase):
     def test_grid_alarm_disabled(self):
         self._set_setting('/Settings/Alarm/System/GridLost', 0)
         self._monitor.set_value(self.vebus, '/Ac/ActiveIn/ActiveInput', 0xF0)
-        self._update_values(interval=6000)
+        self._update_values(interval=11000)
         self._check_values({'/Ac/Alarms/GridLost': None})
 
     def test_grid_alarm_enabled(self):
@@ -53,11 +53,11 @@ class TestGridAlarm(TestSystemCalcBase):
         self._monitor.set_value(self.vebus, '/Ac/ActiveIn/ActiveInput', 0xF0)
 
         # Alarm doesn't activate immediately
-        self._update_values(interval=3000)
+        self._update_values(interval=6000)
         self._check_values({'/Ac/Alarms/GridLost': 0})
 
         # Alarm activates after timeout
-        self._update_values(interval=3000)
+        self._update_values(interval=6000)
         self._check_values({'/Ac/Alarms/GridLost': 2})
 
         # Alarm resets if the grid come back
@@ -72,12 +72,12 @@ class TestGridAlarm(TestSystemCalcBase):
 
         # Fail, no alarm
         self._monitor.set_value(self.vebus, '/Ac/ActiveIn/ActiveInput', 0xF0)
-        self._update_values(interval=3000)
+        self._update_values(interval=6000)
         self._check_values({'/Ac/Alarms/GridLost': 0})
 
         # AC Return before the timeout
         self._monitor.set_value(self.vebus, '/Ac/ActiveIn/ActiveInput', 1)
-        self._update_values(interval=3000)
+        self._update_values(interval=6000)
         self._check_values({'/Ac/Alarms/GridLost': 0})
 
     def test_grid_alarm_on_genertor(self):
@@ -89,11 +89,11 @@ class TestGridAlarm(TestSystemCalcBase):
         self._monitor.set_value(self.vebus, '/Ac/ActiveIn/ActiveInput', 0)
 
         # Alarm doesn't activate immediately
-        self._update_values(interval=3000)
+        self._update_values(interval=6000)
         self._check_values({'/Ac/Alarms/GridLost': 0})
 
         # Alarm activates after timeout
-        self._update_values(interval=3000)
+        self._update_values(interval=6000)
         self._check_values({'/Ac/Alarms/GridLost': 2})
 
 		# Grid returns
-- 
2.17.1

