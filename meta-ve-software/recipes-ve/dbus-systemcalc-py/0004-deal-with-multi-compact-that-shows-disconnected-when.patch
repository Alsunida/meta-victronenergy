From a64075ab3db55df437f9c214ca9e1e06a31b4ce9 Mon Sep 17 00:00:00 2001
From: Izak Burger <isburger@gmail.com>
Date: Tue, 3 Mar 2020 16:54:04 +0200
Subject: [PATCH 1/2] deal with multi compact that shows disconnected when
 turned off

Some Multi models show that the input is disconnected (rather than invalid)
when turned off. This incorrectly causes the grid alarm to be raised. When
turning off the Multi remotely, there may also be a brief moment when
the Multi indicates the input to be disconnected just before it turns off.

Additionally increase the debouncing timeout to deal with false alarms
when the Multi is first turned on.
---
 delegates/gridalarm.py  | 12 ++++++++----
 tests/gridalarm_test.py | 28 +++++++++++++++++++++-------
 2 files changed, 29 insertions(+), 11 deletions(-)

diff --git a/delegates/gridalarm.py b/delegates/gridalarm.py
index 11a16d6..dcb7842 100644
--- a/delegates/gridalarm.py
+++ b/delegates/gridalarm.py
@@ -2,11 +2,9 @@ import gobject
 from delegates.base import SystemCalcDelegate
 
 class GridAlarm(SystemCalcDelegate):
-	ALARM_TIMEOUT = 10000
+	ALARM_TIMEOUT = 15000
 	def __init__(self):
 		super(GridAlarm, self).__init__()
-		# We arm the alarm only once grid power was detected.
-		self.armed = False
 		self._timer = None
 
 	def set_sources(self, dbusmonitor, settings, dbusservice):
@@ -39,7 +37,13 @@ class GridAlarm(SystemCalcDelegate):
 			if source in (0xF0, 2):
 				# No active input, or generator input is active. Raise the
 				# alarm. An active generator will be treated as lost grid.
-				self.raise_alarm()
+				# First we need to be sure we're not dealing with a Multi
+				# Compact that shows Disconnected when it is off.
+				vebus_path = newvalues.get('/VebusService')
+				if self._dbusmonitor.get_value(vebus_path, '/Mode') == 3:
+					self.raise_alarm()
+				else:
+					self.cancel_alarm()
 			elif source in (0, 1, 3):
 				# Source can be:
 				# None: Multi is gone, eg during reset or startup. Do nothing.
diff --git a/tests/gridalarm_test.py b/tests/gridalarm_test.py
index 62a2508..d84c523 100644
--- a/tests/gridalarm_test.py
+++ b/tests/gridalarm_test.py
@@ -27,6 +27,7 @@ class TestGridAlarm(TestSystemCalcBase):
                 '/Hub4/AssistantId': 5,
                 '/VebusMainState': 9,
                 '/State': 3,
+                '/Mode': 3,
                 '/Soc': 53.2,
                 '/ExtraBatteryCurrent': 0})
 
@@ -41,7 +42,7 @@ class TestGridAlarm(TestSystemCalcBase):
     def test_grid_alarm_disabled(self):
         self._set_setting('/Settings/Alarm/System/GridLost', 0)
         self._monitor.set_value(self.vebus, '/Ac/ActiveIn/ActiveInput', 0xF0)
-        self._update_values(interval=11000)
+        self._update_values(interval=16000)
         self._check_values({'/Ac/Alarms/GridLost': None})
 
     def test_grid_alarm_enabled(self):
@@ -53,11 +54,11 @@ class TestGridAlarm(TestSystemCalcBase):
         self._monitor.set_value(self.vebus, '/Ac/ActiveIn/ActiveInput', 0xF0)
 
         # Alarm doesn't activate immediately
-        self._update_values(interval=6000)
+        self._update_values(interval=8000)
         self._check_values({'/Ac/Alarms/GridLost': 0})
 
         # Alarm activates after timeout
-        self._update_values(interval=6000)
+        self._update_values(interval=8000)
         self._check_values({'/Ac/Alarms/GridLost': 2})
 
         # Alarm resets if the grid come back
@@ -72,12 +73,12 @@ class TestGridAlarm(TestSystemCalcBase):
 
         # Fail, no alarm
         self._monitor.set_value(self.vebus, '/Ac/ActiveIn/ActiveInput', 0xF0)
-        self._update_values(interval=6000)
+        self._update_values(interval=8000)
         self._check_values({'/Ac/Alarms/GridLost': 0})
 
         # AC Return before the timeout
         self._monitor.set_value(self.vebus, '/Ac/ActiveIn/ActiveInput', 1)
-        self._update_values(interval=6000)
+        self._update_values(interval=8000)
         self._check_values({'/Ac/Alarms/GridLost': 0})
 
     def test_grid_alarm_on_genertor(self):
@@ -89,14 +90,27 @@ class TestGridAlarm(TestSystemCalcBase):
         self._monitor.set_value(self.vebus, '/Ac/ActiveIn/ActiveInput', 0)
 
         # Alarm doesn't activate immediately
-        self._update_values(interval=6000)
+        self._update_values(interval=8000)
         self._check_values({'/Ac/Alarms/GridLost': 0})
 
         # Alarm activates after timeout
-        self._update_values(interval=6000)
+        self._update_values(interval=8000)
         self._check_values({'/Ac/Alarms/GridLost': 2})
 
 		# Grid returns
         self._monitor.set_value(self.vebus, '/Ac/ActiveIn/ActiveInput', 1) # Grid
         self._update_values()
         self._check_values({'/Ac/Alarms/GridLost': 0})
+
+    def test_multi_compact_off(self):
+        self._set_setting('/Settings/Alarm/System/GridLost', 1)
+        self._monitor.set_value(self.vebus, '/Ac/ActiveIn/ActiveInput', 1)
+        self._update_values()
+
+        # Grid fails
+        self._monitor.set_value(self.vebus, '/Ac/ActiveIn/ActiveInput', 0xF0)
+        self._monitor.set_value(self.vebus, '/Mode', 4) # Off
+
+        # Alarm doesn't activate
+        self._update_values(interval=12000)
+        self._check_values({'/Ac/Alarms/GridLost': 0})
-- 
2.7.4

