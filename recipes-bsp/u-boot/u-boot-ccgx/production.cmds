# Production programming script for Color Control with u-boot
# setenv ipaddr 192.168.4.251; setenv serverip 192.168.4.146; if tftp 80800000 bpp3/boot.scr; then; source 80800000; fi

# black screen
mw 0x8fE00000 000000 1FE00

setenv stdout vga
echo; echo ========== Starting Programming ==========; echo;
setenv stdout serial

setenv dot 'setenv stdout vga; echo ".\\c"; setenv stdout serial'

# set addresses
setenv loadaddr 	80300000
setenv uloadaddr	80700000
setenv cmpaddr		81800000

setenv error 'if true; then
	setenv stdout vga
	echo
	echo error: $err;
	setenv stderr serial
	setenv stdout serial
	while true; do; sleep 1; done
fi'

#mtdparts default
setenv mtdparts mtdparts=omap2-nand.0:512k(MLO),1m(u-boot),256k(env1),256k(env2),1m(u-boot2),256k(bootparms),768k(splash),6m(kernel),200m(data),-(rootfs)

# use mmc
setenv mlo 				mlo;
setenv u-boot 			u-boot.img
setenv linux 		uImage
setenv splash			splash.img
setenv ubi 				ubi.img
setenv do_load_mlo 		fatload mmc 0 $loadaddr $mlo
setenv do_load_uboot 	fatload mmc 0 $uloadaddr ${u-boot}
setenv do_load_linux	fatload mmc 0 $loadaddr $linux
setenv do_load_ubi		fatload mmc 0 $loadaddr $ubi
setenv do_load_splash 	fatload mmc 0 $loadaddr $splash

# update commands

# load mlo and remember its size
# Note: while there is space for 128k this file is loaded into the
# 64k sdram of the mcu. So refuse a file larger then 54k to leave
# some space for stack etc.
setenv load_mlo 'if true; then
	echo '========== Load MLO =========='
	run dot
	if run do_load_mlo; then
		setenv mloaddr $loadaddr
		setenv mlo_load_size $filesize
		if test 0x$mlo_load_size -lt 55296; then
			echo "OK"
		else
			setenv err "the file $mlo is (most likely) too large"
			run error
		fi
	else
		setenv err "the file $mlo is missing"
		run error
	fi
fi'

#
# Program MLO
#
setenv prog_mlo 'if true; then
	echo '========== Flash MLO =========='
	run dot
	nandecc hw;
	mw.b $cmpaddr 0 $mlo_load_size
	nand read $cmpaddr 0 $mlo_load_size
	nand erase 0 20000
	nand write $mloaddr 0 $mlo_load_size
	nandecc sw;
fi'

# load u-boot and remember its size
# note on u-boot 2103.01-rc2 a failed test will exit the run command..
# so it must be written to be true is the sane case..
setenv load_uboot 'if true; then
	echo '========== Load U-Boot =========='
	run dot
	if run do_load_uboot; then
		setenv uboot_load_size $filesize;
		if test 0x$uboot_load_size -lt 0x100000; then
			echo "OK"
		else
			setenv err "the file ${u-boot} is too large"
			run error
		fi

		if iminfo $uloadaddr; then
			echo "OK"
		else
			setenv err "the file ${u-boot} is corrupt"
			run error
		fi
	else
		setenv err "the file ${u-boot} is missing"
		run error
	fi
fi'

#
# Program U-Boot image
#
setenv prog_uboot 'if true; then
	echo; echo '========== Flash U-Boot =========='; echo
	run dot
	nand erase.part u-boot;
	nand write $uloadaddr u-boot $uboot_load_size
fi'

#
# Load Linux image
#
setenv load_linux 'if true; then
	echo; echo '========== Load Linux =========='; echo
	run dot
	if run do_load_linux; then
		setenv linux_load_size $filesize;
		if test 0x$linux_load_size -lt 0x100000; then
			echo "OK"
		else
			setenv err "the file ${linux} is too large"
			run error
		fi

		if iminfo $loadaddr; then
			echo "OK"
		else
			setenv err "the file ${linux} is corrupt"
			run error
		fi
	else
		setenv err "the file ${linux} is missing"
		run error
	fi
fi'

#
# Program linux image
#
setenv prog_linux 'if true; then
	echo; echo '========== Flash Linux =========='; echo
	run dot
	nand erase.part kernel;
	nand write $loadaddr kernel $filesize
fi'

#
# Program SPL
# needs kernel loaded in RAM..
setenv upd_spl 'if true; then
	echo; echo '========== Flash SPL =========='; echo
	run dot
	run nandargs addtty addmtd addmisc;
	spl export atags;
	nand erase.part bootparms
	nand write 0x80000100 bootparms 0x400
fi'

#
# Program Splash screen
#
setenv upd_splash 'if true; then
	echo; echo ========== Load and Flash splash ==========; echo
	run dot
	if run do_load_splash; then
		nand erase.part splash
		nand write ${loadaddr} splash $filesize
		setenv splashimage 0x84000000
	else
		setenv err "the file ${splash} is missing"
		run error
	fi;
fi'

#
# Program RootFS
#
setenv upd_fs 'if true; then
	echo; echo ========== Load and Flash RootFS ==========; echo;
	run dot
	if run do_load_ubi; then
		nand erase.part rootfs
		nand write ${loadaddr} rootfs ${filesize}
	else
		setenv err "the file ${ubi} is missing"
		run error
	fi
fi'

#
# Kernel arguments
#
setenv misc 	'omapdss.def_disp=lcd omapfb.vram=0:2M vram=2M fbskip quiet'
setenv nandargs	'setenv bootargs root=ubi0:rootfs rootfstype=ubifs ubi.mtd=9'
setenv addmtd	'setenv bootargs ${bootargs} ${mtdparts}'
setenv addtty	'setenv bootargs ${bootargs} console=ttyO0,115200'
setenv addmisc	'setenv bootargs ${bootargs} ${misc}'

#
# Updates
#
setenv upd_mlo 'run load_mlo prog_mlo'
setenv upd_uboot 'run load_uboot prog_uboot'
setenv upd_linux 'run load_linux prog_linux'
setenv upd_all "run upd_uboot upd_mlo upd_linux upd_spl upd_splash upd_fs"

# Execute
if mmc rescan ${mmcdev}; then
	# Start blank
	nand erase.chip
	# Program
	run upd_all
else;
	echo "No SD-card!"
fi;

setenv stdout vga
echo; echo; echo ========== Finished ==========; echo;
echo "Please remove SD-card and wait for reset"; echo;
setenv stdout serial

#
# Set product/field enviroment
#
env default -a
setenv mtdparts mtdparts=omap2-nand.0:512k(MLO),1m(u-boot),256k(env1),256k(env2),1m(u-boot2),256k(bootparms),768k(splash),6m(kernel),200m(data),-(rootfs)
setenv loadaddr 80300000
setenv nandboot 'nand read ${loadaddr} kernel && bootm ${loadaddr}'
setenv bootdelay 2
setenv bootcmd 'if true; then
	echo checking usb;
	usb start;
	if fatload usb 0 80004000 boot.scr; then
		echo starting from usb;
		setenv boot_dev usb
		source 80004000;
	fi

	if mmc rescan ${mmcdev}; then
		echo SD/MMC found on device ${mmcdev};
		if run loadbootscript; then
			echo Running bootscript from mmc ...;
			setenv boot_dev mmc
			source 80004000;
		fi
	fi

	setenv boot_dev nand
	run nandboot;
fi'
saveenv
sleep 5
reset
