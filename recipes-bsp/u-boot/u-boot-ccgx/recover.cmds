# Recover script for Color Control with U-Boot

echo ========== Starting Recover ==========

# black screen
mw 0x8fE00000 000000 1FE00

setenv dot 'setenv stdout vga; echo ".\\c"; setenv stdout serial'

# set addresses
setenv loadaddr 	80300000

setenv mtdparts mtdparts=omap2-nand.0:512k(MLO),1m(u-boot),256k(env1),256k(env2),1m(u-boot2),256k(bootparms),768k(splash),6m(kernel),200m(data),-(rootfs)

setenv error 'if true; then
	setenv stdout vga
	echo
	echo error: $err;
	setenv stderr serial
	setenv stdout serial
	exit;
fi'

# only fatload is supported in this script, so this is the only option..
setenv use_fat 'if true; then
	setenv linux	 	uImage
	setenv splash		splash.img
	setenv ubi 		ubi.img
	setenv do_load_linux	fatload $dev 0 $loadaddr $linux
	setenv do_load_ubi	fatload $dev 0 $loadaddr $ubi
	setenv do_load_splash 	fatload $dev 0 $loadaddr $splash
fi'

# update commands

#
# Load Linux image
#
setenv load_linux 'if true; then
	echo; echo '========== Load Linux =========='; echo
	run dot
	if run do_load_linux; then
		run dot	
		setenv linux_load_size $filesize;
		if test 0x$linux_load_size -lt 0x100000; then
			echo "OK"
		else
			setenv err "the file ${linux} is too large"
			run error
		fi

		if iminfo $loadaddr; then
			echo "OK"
		else
			setenv err "the file ${linux} is corrupt"
			run error
		fi
	else
		setenv err "the file ${linux} is missing"
		run error
	fi
fi'

#
# Program linux image
#
setenv prog_linux 'if true; then
	echo; echo '========== Flash Linux =========='; echo
	run dot	
	nand erase.part kernel;
	run dot	
	nand write $loadaddr kernel $filesize
fi'

#
# Program SPL
# needs kernel loaded in RAM..
# note: args are in the kernel itself so there is no depedency
# between u-boot env and the kernel version.
#
setenv upd_spl 'if true; then
	echo; echo '========== Flash SPL =========='; echo
	run dot	
	setenv bootargs;
	spl export atags;
	run dot	
	nand erase.part bootparms
	run dot	
	nand write 0x80000100 bootparms 0x400
fi'

#
# Program Splash screen
#
setenv upd_splash 'if true; then
	echo; echo ========== Load and Flash splash ==========; echo
	run dot	
	if run do_load_splash; then
		run dot	
		nand erase.part splash
		run dot	
		nand write ${loadaddr} splash $filesize
		run dot	
		setenv splashimage 0x84000000
	else
		setenv err "the file ${splash} is missing"
		run error
	fi;
fi'

#
# Program RootFS
#
setenv upd_fs 'if true; then
	echo; echo ========== Load and Flash RootFS ==========; echo;
	run dot	
	if run do_load_ubi; then
		run dot	
		nand erase.part rootfs
		run dot	
		nand write ${loadaddr} rootfs ${filesize}		
	else
		setenv err "the file ${ubi} is missing"
		run error
	fi
fi'

#
# Updates
#
setenv upd_linux 'run load_linux prog_linux'
setenv upd_all "run upd_linux upd_spl upd_fs upd_splash"

# Execute

# figure out where the script is loaded from
if fatload usb 0 $loadaddr boot.scr; then
	setenv dev usb
	setenv dev_name Usb-stick
else
	setenv dev mmc
	setenv dev_name SD-card
fi

setenv stdout vga
echo; echo ====== Start Programming from $dev_name =======; echo;
setenv stdout serial

run use_fat
run upd_all

setenv stdout vga; 
echo; echo; echo ========== Finished ==========; echo;
echo "Please remove $dev_name and wait for reset"; echo;
sleep 10
setenv stdout serial
reset

